#include <cmath>#include "BP.h"using namespace std;void BP( int M, int N, int size, double f1[], int HI[], int HJ[], int max_iter, int output[]){	double sq0[size], sff0[size], sq1[size], sff1[size];	double sdq[size], Pdq_v[M], sPdq[size], r0[size], r1[size];	double Pr0_v[N], sPr0xsff0[size], Q0[N];	double Pr1_v[N], sPr1xsff1[size], Q1[N];	double sqq[size];	int rem[M];	for(int i=0;i<size;i++)	{		sq1[i] = f1[HJ[i]-1];		sq0[i] = 1-sq1[i];		sff0[i] = sq0[i];		sff1[i] = sq1[i];	}	bool flag_fail=true;		int iter=0;    	while(flag_fail && (iter<max_iter))	{		iter++;					for(int i=0;i<size;i++)		{			sdq[i]=sq0[i]-sq1[i];			if(sdq[i]==0)				sdq[i]=EPS;		}				for(int i=0;i<M;i++)			Pdq_v[i]=1;					for(int i=0;i<size;i++)			Pdq_v[HI[i]-1]=Pdq_v[HI[i]-1]*sdq[i];				for(int i=0;i<size;i++)			sPdq[i]=Pdq_v[HI[i]-1];						for(int i=0;i<size;i++)		{			r0[i] = 0.5 + sPdq[i]/sdq[i]/2;			r1[i] = 1 - r0[i];			if(abs(r0[i])<EPS)				r0[i] = EPS;			if(abs(r1[i])<EPS)				r1[i] = EPS;		}        		//===================				for(int j=0;j<N;j++)		{			Pr0_v[j]=1;			Pr1_v[j]=1;		}					for(int i=0;i<size;i++)		{			Pr0_v[HJ[i]-1]=Pr0_v[HJ[i]-1]*r0[i];			Pr1_v[HJ[i]-1]=Pr1_v[HJ[i]-1]*r1[i];		}						for(int i=0;i<size;i++)		{			sPr0xsff0[i] = Pr0_v[HJ[i]-1] * sff0[i];			sPr1xsff1[i] = Pr1_v[HJ[i]-1] * sff1[i];		}				for(int i=0;i<N;i++)		{			Q0[i]=0;			Q1[i]=0;		}				for(int i=0;i<size;i++)		{			Q0[HJ[i]-1] = Q0[HJ[i]-1] + sPr0xsff0[i];			Q1[HJ[i]-1] = Q1[HJ[i]-1] + sPr1xsff1[i];		}						for(int i=0;i<size;i++)		{			sq0[i] = sPr0xsff0[i]/r0[i];			sq1[i] = sPr1xsff1[i]/r1[i];		}				//============================		for(int i=0;i<size;i++)		{			sqq[i] = sq0[i]+sq1[i];			sq0[i] = sq0[i]/sqq[i];			sq1[i] = 1-sq0[i];		}				for(int j=0;j<N;j++)			output[j]=(Q1[j]>Q0[j])	?	1	:	0;				for(int i=0;i<M;i++)			rem[i] = 0;				for(int i=0;i<size;i++)			rem[HI[i]-1] = rem[HI[i]-1] + output[HJ[i]-1];				flag_fail = false;		for(int i=0;i<M;i++)			flag_fail = ((rem[i]%2)!=0) || flag_fail;	}}